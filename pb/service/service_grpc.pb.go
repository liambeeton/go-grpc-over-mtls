// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: service.proto

package service

import (
	context "context"
	message "github.com/liambeeton/go-grpc-over-mtls/pb/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankService_CreateAccount_FullMethodName = "/bank.service.v1.BankService/CreateAccount"
	BankService_GetBalance_FullMethodName    = "/bank.service.v1.BankService/GetBalance"
	BankService_Deposit_FullMethodName       = "/bank.service.v1.BankService/Deposit"
	BankService_Withdraw_FullMethodName      = "/bank.service.v1.BankService/Withdraw"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	CreateAccount(ctx context.Context, in *message.CreateAccountRequest, opts ...grpc.CallOption) (*message.CreateAccountResponse, error)
	GetBalance(ctx context.Context, in *message.GetBalanceRequest, opts ...grpc.CallOption) (*message.GetBalanceResponse, error)
	Deposit(ctx context.Context, in *message.DepositRequest, opts ...grpc.CallOption) (*message.DepositResponse, error)
	Withdraw(ctx context.Context, in *message.WithdrawRequest, opts ...grpc.CallOption) (*message.WithdrawResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) CreateAccount(ctx context.Context, in *message.CreateAccountRequest, opts ...grpc.CallOption) (*message.CreateAccountResponse, error) {
	out := new(message.CreateAccountResponse)
	err := c.cc.Invoke(ctx, BankService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) GetBalance(ctx context.Context, in *message.GetBalanceRequest, opts ...grpc.CallOption) (*message.GetBalanceResponse, error) {
	out := new(message.GetBalanceResponse)
	err := c.cc.Invoke(ctx, BankService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Deposit(ctx context.Context, in *message.DepositRequest, opts ...grpc.CallOption) (*message.DepositResponse, error) {
	out := new(message.DepositResponse)
	err := c.cc.Invoke(ctx, BankService_Deposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankServiceClient) Withdraw(ctx context.Context, in *message.WithdrawRequest, opts ...grpc.CallOption) (*message.WithdrawResponse, error) {
	out := new(message.WithdrawResponse)
	err := c.cc.Invoke(ctx, BankService_Withdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	CreateAccount(context.Context, *message.CreateAccountRequest) (*message.CreateAccountResponse, error)
	GetBalance(context.Context, *message.GetBalanceRequest) (*message.GetBalanceResponse, error)
	Deposit(context.Context, *message.DepositRequest) (*message.DepositResponse, error)
	Withdraw(context.Context, *message.WithdrawRequest) (*message.WithdrawResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) CreateAccount(context.Context, *message.CreateAccountRequest) (*message.CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedBankServiceServer) GetBalance(context.Context, *message.GetBalanceRequest) (*message.GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBankServiceServer) Deposit(context.Context, *message.DepositRequest) (*message.DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedBankServiceServer) Withdraw(context.Context, *message.WithdrawRequest) (*message.WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).CreateAccount(ctx, req.(*message.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetBalance(ctx, req.(*message.GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Deposit(ctx, req.(*message.DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).Withdraw(ctx, req.(*message.WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.service.v1.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _BankService_CreateAccount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BankService_GetBalance_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _BankService_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _BankService_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
